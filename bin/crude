#!/usr/bin/env node

const pg = require('commander');
const shell = require('shelljs');
const path = require('path');
const chalk = require('chalk');
const {open} = require('../lib/tools');
const serve = require('../lib/static_serve');

const rv = (...args)=> path.resolve(__dirname, '..', ...args);

const shellCmd = {
  "dev": `node ${rv('lib/script_start.js')}`,
  "serve": `npx serve dist`,
  "clean:before": `rimraf dist ${rv('.temp-script')}`,
  "clean:after": `rimraf ${rv('.temp-script')}`,
  "build:gengrate": `node ${rv('lib/script_build')}`,
  "build:assets": `node ${rv('lib/build_assets')}`

};

let hasYarn = false;

if(shell.which('yarn')){
  hasYarn = true;
}

pg.version('0.1.0', '-v, --version');

// help 命令
pg
  .command('help')
  .description('使用帮助')
  .action(()=>pg.outputHelp());

pg
  .command('start')
  .description('开始写作')
  .action(()=>{
    process.NODE_ENV = 'development';
    shell.exec(shellCmd['dev']);
  });

pg
  .command('build')
  .description('生成网站')
  .action(()=>{
    build();
  });

pg
  .command('preview')
  .description('生成网站并预览')
  .action(()=>{
    console.log();
    console.log(chalk.cyan('开始生成静态页面...'));
    console.log();
    build();
    console.log();
    console.log(chalk.cyan('开启静态服务器并打开浏览器...'));
    console.log('-------------------------');
    console.log('¦                       ¦');
    console.log('¦     localhost:5001    ¦');
    console.log('¦                       ¦');
    console.log('-------------------------');
    serve(5001, path.resolve('./dist'))
      .start(()=>{
        open(5001);
      });

  });

pg.parse(process.argv);

function runScript(script) {
  if (hasYarn) {
    shell.exec(`yarn run ${script}`);
  } else {
    shell.exec(`yarn run ${script}`);
  }
}

function build() {
  process.NODE_ENV = 'production';

  shell.exec(shellCmd['clean:before']);

  process.env.script_cycle = 'build:assets';
  shell.exec(shellCmd['build:assets']);

  process.env.script_cycle = 'build:gengrate';
  shell.exec(shellCmd['build:gengrate']);

  shell.exec(shellCmd['clean:after']);
}
